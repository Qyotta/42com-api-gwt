package de.qyotta.fourtytwocom.api.example.client;

import org.gwtbootstrap3.client.ui.ThumbnailLink;

import com.google.gwt.activity.shared.ActivityManager;
import com.google.gwt.activity.shared.ActivityMapper;
import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.uibinder.client.UiHandler;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.SimplePanel;
import com.google.gwt.user.client.ui.Widget;
import com.google.web.bindery.event.shared.EventBus;

import de.qyotta.fourtytwocom.api.client.utils.RESTCall;
import de.qyotta.fourtytwocom.api.example.client.event.MenuEntrySelectedEvent;
import de.qyotta.fourtytwocom.api.example.client.event.MenuEntrySelectedEvent.MenuEntryName;
import de.qyotta.fourtytwocom.api.example.client.init.AppPlaceHistoryMapper;
import de.qyotta.fourtytwocom.api.example.client.init.gin.ApiExampleGinjector;
import de.qyotta.fourtytwocom.api.example.client.init.history.HistoryObserver;
import de.qyotta.fourtytwocom.api.example.client.init.history.MGWTPlaceHistoryHandler;
import de.qyotta.fourtytwocom.api.example.client.modules.dashboard.DashboardPlace;

public class WebApp extends Composite implements EntryPoint {
   interface MyUiBinder extends UiBinder<Widget, WebApp> {
      // generated by gwt
   }

   private static MyUiBinder myUiBinder = GWT.create(MyUiBinder.class);

   @UiField
   protected ThumbnailLink dashboardLink;

   @UiField
   protected ThumbnailLink accountLink;

   @UiField
   protected SimplePanel content;

   private EventBus eventBus;

   @Override
   public void onModuleLoad() {

      RootPanel.get().add(myUiBinder.createAndBindUi(this));
      initDevoopsTheme();
      initApp();
   }

   private void initApp() {
      final ApiExampleGinjector injector = GWT.create(ApiExampleGinjector.class);
      final AppPlaceHistoryMapper historyMapper = GWT.create(AppPlaceHistoryMapper.class);

      eventBus = injector.getEventBus();
      RESTCall.setEventBus(eventBus);

      // Start ActivityManager for the main widget with our ActivityMapper
      final ActivityMapper activityMapper = injector.getActivityMapper();
      final ActivityManager activityManager = new ActivityManager(activityMapper, eventBus);
      content.getElement().setId("content"); //$NON-NLS-1$
      activityManager.setDisplay(content);

      final HistoryObserver historyObserver = injector.getAppHistoryObserver();
      final MGWTPlaceHistoryHandler historyHandler = new MGWTPlaceHistoryHandler(historyMapper, historyObserver);

      historyHandler.register(injector.getPlaceController(), eventBus, new DashboardPlace());
      historyHandler.handleCurrentHistory();
   }

   @UiHandler("dashboardLink")
   public void onDashboardLinkSelected(final ClickEvent event) {
      eventBus.fireEvent(new MenuEntrySelectedEvent(MenuEntryName.DASHBOARD));
   }

   @UiHandler("accountLink")
   public void onAccountLinkSelected(final ClickEvent event) {
      eventBus.fireEvent(new MenuEntrySelectedEvent(MenuEntryName.ACCOUNT));
   }

   /**
    * In this script main logic of devoops theme (taken from devoops.js)
    */
   public static native void initDevoopsTheme() /*-{
      $wnd.$('.show-sidebar').on('click', function() {
         $wnd.$('div#main').toggleClass('sidebar-show');
         setTimeout(MessagesMenuWidth, 250);
      });
      $wnd.$('.main-menu').on('click', 'a', function(e) {
         var parents = $wnd.$(this).parents('li');
         var li = $wnd.$(this).closest('li.dropdown');
         var another_items = $wnd.$('.main-menu li').not(parents);
         another_items.find('a').removeClass('active');
         another_items.find('a').removeClass('active-parent');
         if ($wnd.$(this).hasClass('dropdown-toggle') || $wnd.$(this).closest('li').find('ul').length == 0) {
            $wnd.$(this).addClass('active-parent');
            var current = $wnd.$(this).next();
            if (current.is(':visible')) {
               li.find("ul.dropdown-menu").slideUp('fast');
               li.find("ul.dropdown-menu a").removeClass('active')
            } else {
               another_items.find("ul.dropdown-menu").slideUp('fast');
               current.slideDown('fast');
            }
         } else {
            if (li.find('a.dropdown-toggle').hasClass('active-parent')) {
               var pre = $wnd.$(this).closest('ul.dropdown-menu');
               pre.find("li.dropdown").not($wnd.$(this).closest('li')).find('ul.dropdown-menu').slideUp('fast');
            }
         }
         if ($wnd.$(this).hasClass('active') == false) {
            $wnd.$(this).parents("ul.dropdown-menu").find('a').removeClass('active');
            $wnd.$(this).addClass('active')
         }
         if ($wnd.$(this).hasClass('ajax-link')) {
            e.preventDefault();
            if ($wnd.$(this).hasClass('add-full')) {
               $wnd.$('#content').addClass('full-content');
            } else {
               $wnd.$('#content').removeClass('full-content');
            }
            var url = $wnd.$(this).attr('href');
            window.location.hash = url;
            LoadAjaxContent(url);
         }
         if ($wnd.$(this).attr('href') == '#') {
            e.preventDefault();
         }
      });
      var height = window.innerHeight - 49;
      $wnd.$('#main').css('min-height', height).on('click', '.expand-link', function(e) {
         var body = $wnd.$('body');
         e.preventDefault();
         var box = $wnd.$(this).closest('div.box');
         var button = $wnd.$(this).find('i');
         button.toggleClass('fa-expand').toggleClass('fa-compress');
         box.toggleClass('expanded');
         body.toggleClass('body-expanded');
         var timeout = 0;
         if (body.hasClass('body-expanded')) {
            timeout = 100;
         }
         setTimeout(function() {
            box.toggleClass('expanded-padding');
         }, timeout);
         setTimeout(function() {
            box.resize();
            box.find('[id^=map-]').resize();
         }, timeout + 50);
      }).on('click', '.collapse-link', function(e) {
         e.preventDefault();
         var box = $wnd.$(this).closest('div.box');
         var button = $wnd.$(this).find('i');
         var content = box.find('div.box-content');
         content.slideToggle('fast');
         button.toggleClass('fa-chevron-up').toggleClass('fa-chevron-down');
         setTimeout(function() {
            box.resize();
            box.find('[id^=map-]').resize();
         }, 50);
      }).on('click', '.close-link', function(e) {
         e.preventDefault();
         var content = $wnd.$(this).closest('div.box');
         content.remove();
      });
      $wnd.$('#locked-screen').on('click', function(e) {
         e.preventDefault();
         $wnd.$('body').addClass('body-screensaver');
         $wnd.$('#screensaver').addClass("show");
         ScreenSaver();
      });
      $wnd.$('body').on('click', 'a.close-link', function(e) {
         e.preventDefault();
         CloseModalBox();
      });
      $wnd.$('#top-panel').on('click', 'a', function(e) {
         if ($wnd.$(this).hasClass('ajax-link')) {
            e.preventDefault();
            if ($wnd.$(this).hasClass('add-full')) {
               $wnd.$('#content').addClass('full-content');
            } else {
               $wnd.$('#content').removeClass('full-content');
            }
            var url = $wnd.$(this).attr('href');
            window.location.hash = url;
            LoadAjaxContent(url);
         }
      });
      $wnd.$('#search').on('keydown', function(e) {
         if (e.keyCode == 13) {
            e.preventDefault();
            $wnd.$('#content').removeClass('full-content');
            ajax_url = 'ajax/page_search.html';
            window.location.hash = ajax_url;
            LoadAjaxContent(ajax_url);
         }
      });
      $wnd.$('#screen_unlock').on(
            'mouseover',
            function() {
               var header = 'Enter current username and password';
               var form = $wnd.$('<div class="form-group"><label class="control-label">Username</label><input type="text" class="form-control" name="username" /></div>'
                     + '<div class="form-group"><label class="control-label">Password</label><input type="password" class="form-control" name="password" /></div>');
               var button = $wnd.$('<div class="text-center"><a href="index.html" class="btn btn-primary">Unlock</a></div>');
               OpenModalBox(header, form, button);
            });

   }-*/;

}